import os
import re
import requests
import google.generativeai as genai
from dotenv import load_dotenv

UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

genai.configure(api_key=GEMINI_API_KEY)

model = genai.GenerativeModel("gemini-1.5-pro")

# Cria pastas se n√£o existirem
os.makedirs("artigos", exist_ok=True)
 
# Fun√ß√£o para gerar imagem usando a API gratuita do Unsplash
def gerar_imagem_gratis_unsplash(query, index, nome_base):
    url = f"https://api.unsplash.com/photos/random?query={query}&client_id={UNSPLASH_ACCESS_KEY}"
    response = requests.get(url).json()

    # Em caso de erro
    if "urls" not in response:
        print(f"‚ö†Ô∏è Erro ao buscar imagem: {response}")
        return ""

    image_url = response["urls"]["regular"]
    img_path = f"artigos/{nome_base}_imagem_{index}.jpg"
    img_data = requests.get(image_url).content
    with open(img_path, "wb") as handler:
        handler.write(img_data)

    return img_path

def gerar_artigos():
    for nome_arquivo in os.listdir("transcricoes"):
        if nome_arquivo.endswith(".txt"):
            caminho_txt = os.path.join("transcricoes", nome_arquivo)
            nome_base = os.path.splitext(nome_arquivo)[0]

            with open(caminho_txt, "r", encoding="utf-8") as file:
                texto_base = file.read()

            # Prompt
            prompt = f"""
            
            Com base no conte√∫do abaixo, escreva um artigo em HTML em portugu√™s, que inclua uma meta tag podendo ter o content de: filmes-e-series, jogos, curiosidades, musica, saude, tecnologia. Escolha o que fazer maior sentido para o conte√∫do. Exemplo:
            <head>
                <meta name="category" content="tecnologia">
                <title>Exemplo de Artigo</title>
            </head>
            Para gerar o artigo foque nos seguites t√≥picos:
            
            ### 1. **Conte√∫do Original e Profundo**

            - Escreva **an√°lises detalhadas** para cada item do ranking, explicando por que ele ocupa aquela posi√ß√£o.
            - Inclua **fontes confi√°veis** para embasar suas escolhas.

            ### 2. **Formato Estruturado e Escane√°vel**

            - Use **t√≠tulos e subt√≠tulos claros (H2, H3, H4)** para facilitar a leitura.
            - Adicione **listas numeradas ou com marcadores** para organiza√ß√£o.
            - Destaque **pontos-chave em negrito** para facilitar a leitura r√°pida.

            ### 3. **M√≠dia Visual de Qualidade**

            - Inclua **imagens originais** ou com licen√ßa de uso (Unsplash, Pexels, Freepik).
            - Adicione **infogr√°ficos ou tabelas** para tornar os dados mais atraentes.
            - Se poss√≠vel, **incorpore v√≠deos** (pr√≥prios ou de fontes confi√°veis).

            ### 4. **SEO e Experi√™ncia do Usu√°rio**

            - Escreva **t√≠tulos chamativos e descritivos**.
            - Utilize palavras-chave de forma natural.
            - Crie **meta descri√ß√µes** atrativas para cada artigo.
            - Melhore o tempo de carregamento do site.

            ### 5. **Engajamento e Autoridade**

            - Adicione **links internos** para outros artigos relevantes do seu blog.
            - Incentive coment√°rios e intera√ß√µes.
            - Atualize rankings periodicamente para manter a relev√¢ncia.

            ### 6. **Evite Conte√∫do de Baixo Valor**

            - Evite textos superficiais ou autom√°ticos.
            - N√£o crie artigos apenas para gerar cliques sem entregar valor real.
            
            Para cada se√ß√£o, adicione um coment√°rio HTML com uma descri√ß√£o da imagem ideal para acompanhar essa parte, no formato:
            <!-- imagem: descri√ß√£o da imagem -->

            Texto:
            \"\"\"{texto_base}\"\"\"
            """

            print(f"üìÑ Gerando artigo para: {nome_arquivo}")
            response = model.generate_content(prompt)
            html_com_tags = response.text

            # Busca por coment√°rios de imagens
            imagens = re.findall(r"<!-- imagem: (.*?) -->", html_com_tags)
            html_final = html_com_tags

            for i, descricao in enumerate(imagens):
                img_path = gerar_imagem_gratis_unsplash(descricao, i, nome_base)
                if img_path:
                    img_tag = f'<img src="{os.path.basename(img_path)}" alt="{descricao}" style="max-width:100%; border-radius:10px; margin: 20px 0;">'
                    html_final = html_final.replace(f"<!-- imagem: {descricao} -->", img_tag, 1)

            # Salva HTML final
            caminho_html = f"artigos/{nome_base}.html"
            with open(caminho_html, "w", encoding="utf-8") as f:
                f.write(html_final)

            print(f"‚úÖ Artigo gerado: {caminho_html}")
