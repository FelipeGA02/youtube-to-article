import os
import re
import requests
import google.generativeai as genai
from dotenv import load_dotenv
import time

UNSPLASH_ACCESS_KEY = os.getenv("UNSPLASH_ACCESS_KEY")

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

genai.configure(api_key=GEMINI_API_KEY)

model = genai.GenerativeModel("gemini-1.5-pro")

os.makedirs("artigos", exist_ok=True)
 
def gerar_query_visual(descricao, contexto):
    prompt_query = f"""
    Voc√™ √© um especialista em busca de imagens para ilustrar artigos. Com base na descri√ß√£o abaixo e no contexto geral do artigo, gere uma *query* em ingl√™s, concisa e visualmente expressiva para ser usada na API do Unsplash.

    Descri√ß√£o: "{descricao}"
    Contexto do artigo: \"\"\"{contexto}\"\"\"

    A query deve ser espec√≠fica e representar bem a imagem sugerida.
    """
    response = model.generate_content(prompt_query)
    return response.text.strip().replace('"', '')


def gerar_imagem_gratis_unsplash(query, index, nome_base):
    url = f"https://api.unsplash.com/photos/random?query={query}&client_id={UNSPLASH_ACCESS_KEY}"
    response = requests.get(url).json()

    # Em caso de erro
    if "urls" not in response:
        print(f"‚ö†Ô∏è Erro ao buscar imagem: {response}")
        return ""

    image_url = response["urls"]["regular"]
    time.sleep(2)
    img_path = f"artigos/{nome_base}_imagem_{index}.jpg"
    img_data = requests.get(image_url).content
    with open(img_path, "wb") as handler:
        handler.write(img_data)

    return img_path

def gerar_artigos():
    for nome_arquivo in os.listdir("transcricoes"):
        if nome_arquivo.endswith(".txt"):
            caminho_txt = os.path.join("transcricoes", nome_arquivo)
            nome_base = os.path.splitext(nome_arquivo)[0]

            with open(caminho_txt, "r", encoding="utf-8") as file:
                texto_base = file.read()

            # Prompt
            prompt = f"""
            
            Imagine que voc√™ √© um profissional especializado na cria√ß√£o de artigos para blogs e sites, com foco em SEO, experi√™ncia do usu√°rio e autoridade no conte√∫do. Com base no conte√∫do abaixo, escreva um artigo em HTML em portugu√™s, estruturado conforme as melhores pr√°ticas editoriais e de marketing de conte√∫do.

            Requisitos Gerais:
            O artigo deve conter entre 1000 e 2000 palavras.

            O texto deve ser original, profundo e informativo, agregando valor real ao leitor.

            Cabe√ßalho HTML:
            Adicione a tag:

            <meta name="category" content="...">
            Escolha o valor mais apropriado entre: filmes-e-series, jogos, curiosidades, musica, saude, tecnologia, com base no conte√∫do.

            Inclua tamb√©m:

            <meta name="description" content="Resumo atrativo do artigo com at√© 160 caracteres.">
            <title>T√≠tulo chamativo do artigo</title>
            Estrutura do Artigo:
            Use t√≠tulos e subt√≠tulos claros com <h2>, <h3> e <h4>.

            Organize o conte√∫do em listas numeradas ou com marcadores quando necess√°rio.

            Destaque pontos-chave em negrito para melhorar a leitura escane√°vel.

            Adicione coment√°rios HTML descrevendo as imagens ideais para cada se√ß√£o, no formato:

            <!-- imagem: descri√ß√£o da imagem -->
            Conte√∫do:
            Escreva an√°lises detalhadas sobre os itens ou temas discutidos.

            Explique por que cada ponto merece destaque, com base em crit√©rios claros.

            Sempre que poss√≠vel, cite fontes confi√°veis para embasar suas afirma√ß√µes.

            Elementos Visuais:
            Sugira o uso de imagens livres de direitos autorais (como Unsplash, Freepik, Pexels).

            Utilize infogr√°ficos, gr√°ficos ou v√≠deos quando relevante (pode ser apenas a sugest√£o no coment√°rio HTML).

            SEO e Experi√™ncia do Usu√°rio:
            Use palavras-chave de forma natural ao longo do texto.

            Escreva uma meta descri√ß√£o atrativa para aumentar o CTR.

            Mantenha o c√≥digo e o conte√∫do otimizados para carregamento r√°pido.

            Engajamento e Atualiza√ß√£o:
            Inclua links internos fict√≠cios apontando para artigos relacionados (ex: <a href="/artigo-relacionado">Leia tamb√©m</a>).

            Encerre o artigo com um convite √† intera√ß√£o: perguntas, coment√°rios ou compartilhamentos.

            Garanta que o conte√∫do tenha relev√¢ncia duradoura e possa ser atualizado no futuro.

            N√£o Fazer:
            N√£o escreva conte√∫do superficial ou gen√©rico.

            N√£o use frases prontas que n√£o entreguem valor real.

            N√£o gere um artigo curto ou puramente descritivo sem profundidade.

            Texto base:
            \"\"\"{texto_base}\"\"\"
            """

            print(f"üìÑ Gerando artigo para: {nome_arquivo}")
            response = model.generate_content(prompt)
            time.sleep(30)
            html_com_tags = response.text

            # Busca por coment√°rios de imagens
            imagens = re.findall(r"<!-- imagem: (.*?) -->", html_com_tags)
            html_final = html_com_tags

            for i, descricao in enumerate(imagens):
                query_visual = gerar_query_visual(descricao, texto_base)
                time.sleep(30)
                img_path = gerar_imagem_gratis_unsplash(query_visual, i, nome_base)
                time.sleep(2)
                if img_path:
                    img_tag = f'<img src="{os.path.basename(img_path)}" alt="{descricao}" style="max-width:100%; border-radius:10px; margin: 20px 0;">'
                    html_final = html_final.replace(f"<!-- imagem: {descricao} -->", img_tag, 1)

            # Salva HTML final
            caminho_html = f"artigos/{nome_base}.html"
            with open(caminho_html, "w", encoding="utf-8") as f:
                f.write(html_final)

            print(f"‚úÖ Artigo gerado: {caminho_html}")
            time.sleep(4)
